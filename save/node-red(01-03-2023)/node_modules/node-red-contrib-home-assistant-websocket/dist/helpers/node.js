"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigNodes = exports.getServerConfigNode = exports.getNode = void 0;
const globals_1 = require("../globals");
const homeAssistant_1 = require("../homeAssistant");
function getNode(nodeId) {
    if (!nodeId)
        return;
    return globals_1.RED.nodes.getNode(nodeId);
}
exports.getNode = getNode;
function getServerConfigNode(nodeId) {
    if (!nodeId) {
        throw new Error('Invalid server config');
    }
    const node = globals_1.RED.nodes.getNode(nodeId);
    if (!node) {
        throw new Error('Invalid server config');
    }
    checkValidServerConfig(node);
    return node;
}
exports.getServerConfigNode = getServerConfigNode;
function checkValidServerConfig(serverConfigNode) {
    if (serverConfigNode.config.addon) {
        return;
    }
    if (!(0, homeAssistant_1.hasCredentials)(serverConfigNode.credentials)) {
        throw new Error('Invalid server config');
    }
}
function getConfigNodes(node) {
    const status = {
        shape: 'dot',
        fill: 'red',
        text: globals_1.RED._('home-assistant.status.error'),
    };
    const entityConfigNode = getNode(node.config.entityConfig);
    if (!entityConfigNode) {
        node.status(status);
        throw new Error('Invalid entity config');
    }
    const serverConfigNode = getServerConfigNode(entityConfigNode.config.server);
    if (!serverConfigNode) {
        node.status(status);
        throw new Error('Invalid server config');
    }
    checkValidServerConfig(serverConfigNode);
    return {
        entityConfigNode,
        serverConfigNode,
    };
}
exports.getConfigNodes = getConfigNodes;
